// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnswerOption", b =>
                {
                    b.Property<int>("AnswerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerOptionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("AnswerOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("LastScrapedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset>("StartDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("Id");

                    b.HasIndex("SourceUrl")
                        .IsUnique();

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("Flashcard", b =>
                {
                    b.Property<int>("FlashcardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FlashcardId"));

                    b.Property<int>("BackContentType")
                        .HasColumnType("integer");

                    b.Property<string>("BackImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BackText")
                        .HasColumnType("text");

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("FrontContentType")
                        .HasColumnType("integer");

                    b.Property<string>("FrontImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FrontText")
                        .HasColumnType("text");

                    b.HasKey("FlashcardId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("FlashcardCollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("CollectionId");

                    b.ToTable("FlashcardCollections");
                });

            modelBuilder.Entity("Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentPageId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentPageId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("PageId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("PageId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("backend.Models.DailySelection", b =>
                {
                    b.Property<DateOnly>("SelectionDate")
                        .HasColumnType("date")
                        .HasColumnName("selection_date");

                    b.Property<string>("GameMode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gamemode");

                    b.Property<int>("SelectedPolitikerID")
                        .HasColumnType("integer")
                        .HasColumnName("selected_politiker_id");

                    b.Property<string>("SelectedQuoteText")
                        .HasColumnType("text")
                        .HasColumnName("selected_quote_text");

                    b.HasKey("SelectionDate", "GameMode");

                    b.HasIndex("SelectedPolitikerID");

                    b.ToTable("daily_selections");
                });

            modelBuilder.Entity("backend.Models.FakeParti", b =>
                {
                    b.Property<int>("PartiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PartiId"));

                    b.Property<string>("PartiNavn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PartiId");

                    b.ToTable("FakePartier");
                });

            modelBuilder.Entity("backend.Models.FakePolitiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Køn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PartiId")
                        .HasColumnType("integer");

                    b.Property<string>("PolitikerNavn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("Portræt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Uddannelse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("PartiId");

                    b.ToTable("FakePolitikere");
                });

            modelBuilder.Entity("backend.Models.PolidleGamemodeTracker", b =>
                {
                    b.Property<int>("PolitikerId")
                        .HasColumnType("integer")
                        .HasColumnName("politiker_id");

                    b.Property<string>("GameMode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gamemode");

                    b.Property<int?>("AlgoWeight")
                        .HasColumnType("integer")
                        .HasColumnName("algovægt");

                    b.Property<DateOnly?>("LastSelectedDate")
                        .HasColumnType("date")
                        .HasColumnName("lastselecteddate");

                    b.HasKey("PolitikerId", "GameMode");

                    b.ToTable("GameTrackings");
                });

            modelBuilder.Entity("backend.Models.PoliticianQuote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuoteId"));

                    b.Property<int>("PolitikerId")
                        .HasColumnType("integer");

                    b.Property<string>("QuoteText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuoteId");

                    b.HasIndex("PolitikerId");

                    b.ToTable("PoliticianQuotes");
                });

            modelBuilder.Entity("backend.Models.Aktor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Born")
                        .HasColumnType("text");

                    b.Property<string>("Constituencies")
                        .HasColumnType("text");

                    b.Property<string>("EducationStatistic")
                        .HasColumnType("text");

                    b.Property<string>("Educations")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FunctionFormattedTitle")
                        .HasColumnType("text");

                    b.Property<string>("FunctionStartDate")
                        .HasColumnType("text");

                    b.Property<string>("MinisterTitel")
                        .HasColumnType("text");

                    b.Property<string>("Ministers")
                        .HasColumnType("text");

                    b.Property<string>("Nominations")
                        .HasColumnType("text");

                    b.Property<string>("Occupations")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("ParliamentaryPositionsOfTrust")
                        .HasColumnType("text[]");

                    b.Property<string>("Party")
                        .HasColumnType("text");

                    b.Property<string>("PartyShortname")
                        .HasColumnType("text");

                    b.Property<string>("PictureMiRes")
                        .HasColumnType("text");

                    b.Property<string>("PositionsOfTrust")
                        .HasColumnType("text");

                    b.Property<string>("PublicationTitles")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("Spokesmen")
                        .HasColumnType("text");

                    b.Property<string>("biografi")
                        .HasColumnType("text");

                    b.Property<string>("efternavn")
                        .HasColumnType("text");

                    b.Property<string>("fornavn")
                        .HasColumnType("text");

                    b.Property<string>("gruppeNavnKort")
                        .HasColumnType("text");

                    b.Property<string>("navn")
                        .HasColumnType("text");

                    b.Property<DateTime>("opdateringsdato")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("periodeid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("slutdato")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("startdato")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("typeid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Aktor");
                });

            modelBuilder.Entity("backend.Models.PoliticianTwitterId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitterHandle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitterUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TwitterUserId")
                        .IsUnique();

                    b.ToTable("PoliticianTwitterIds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Statsministeriet",
                            TwitterHandle = "Statsmin",
                            TwitterUserId = "806068174567460864"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Venstre, Danmarks Liberale Parti",
                            TwitterHandle = "venstredk",
                            TwitterUserId = "123868861"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Troels Lund Poulsen",
                            TwitterHandle = "troelslundp",
                            TwitterUserId = "2965907578"
                        });
                });

            modelBuilder.Entity("backend.Models.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PoliticianId")
                        .HasColumnType("integer");

                    b.Property<string>("PoliticianTwitterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("PoliticianId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("backend.Models.PollOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PollId")
                        .HasColumnType("integer");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollOptions");
                });

            modelBuilder.Entity("backend.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PoliticianTwitterId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PoliticianTwitterId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PoliticianTwitterId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            PoliticianTwitterId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            PoliticianTwitterId = 3,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.Tweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("PoliticianTwitterId")
                        .HasColumnType("integer");

                    b.Property<int>("Replies")
                        .HasColumnType("integer");

                    b.Property<int>("Retweets")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitterTweetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PoliticianTwitterId", "TwitterTweetId")
                        .IsUnique();

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.UserVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChosenOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("PollId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChosenOptionId");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId", "PollId")
                        .IsUnique();

                    b.ToTable("UserVotes");
                });

            modelBuilder.Entity("AnswerOption", b =>
                {
                    b.HasOne("Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Flashcard", b =>
                {
                    b.HasOne("FlashcardCollection", "FlashcardCollection")
                        .WithMany("Flashcards")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashcardCollection");
                });

            modelBuilder.Entity("Page", b =>
                {
                    b.HasOne("Page", "ParentPage")
                        .WithMany("ChildPages")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.HasOne("Page", "Page")
                        .WithMany("AssociatedQuestions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("backend.Models.Poll", b =>
                {
                    b.HasOne("backend.Models.PoliticianTwitterId", "Politician")
                        .WithMany()
                        .HasForeignKey("PoliticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Politician");
                });

            modelBuilder.Entity("backend.Models.PollOption", b =>
                {
                    b.HasOne("backend.Models.Poll", "Poll")
                        .WithMany("Options")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("backend.Models.Subscription", b =>
                {
                    b.HasOne("backend.Models.PoliticianTwitterId", "Politician")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PoliticianTwitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Politician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Tweet", b =>
                {
                    b.HasOne("backend.Models.PoliticianTwitterId", "Politician")
                        .WithMany("Tweets")
                        .HasForeignKey("PoliticianTwitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Politician");
                });

            modelBuilder.Entity("backend.Models.UserVote", b =>
                {
                    b.HasOne("backend.Models.PollOption", "ChosenOption")
                        .WithMany("UserVotes")
                        .HasForeignKey("ChosenOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Poll", "Poll")
                        .WithMany("UserVotes")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenOption");

                    b.Navigation("Poll");

                    b.Navigation("User");
            modelBuilder.Entity("backend.Models.DailySelection", b =>
                {
                    b.HasOne("backend.Models.FakePolitiker", "SelectedPolitiker")
                        .WithMany()
                        .HasForeignKey("SelectedPolitikerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SelectedPolitiker");
                });

            modelBuilder.Entity("backend.Models.FakePolitiker", b =>
                {
                    b.HasOne("backend.Models.FakeParti", "FakeParti")
                        .WithMany("FakePolitikers")
                        .HasForeignKey("PartiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FakeParti");
                });

            modelBuilder.Entity("backend.Models.PolidleGamemodeTracker", b =>
                {
                    b.HasOne("backend.Models.FakePolitiker", "FakePolitiker")
                        .WithMany("GameTrackings")
                        .HasForeignKey("PolitikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FakePolitiker");
                });

            modelBuilder.Entity("backend.Models.PoliticianQuote", b =>
                {
                    b.HasOne("backend.Models.FakePolitiker", "FakePolitiker")
                        .WithMany("Quotes")
                        .HasForeignKey("PolitikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FakePolitiker");
                });

            modelBuilder.Entity("FlashcardCollection", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("Page", b =>
                {
                    b.Navigation("AssociatedQuestions");

                    b.Navigation("ChildPages");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("backend.Models.PoliticianTwitterId", b =>
                {
                    b.Navigation("Subscriptions");

                    b.Navigation("Tweets");
                });

            modelBuilder.Entity("backend.Models.Poll", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("backend.Models.PollOption", b =>
                {
                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Subscriptions");
            modelBuilder.Entity("backend.Models.FakeParti", b =>
                {
                    b.Navigation("FakePolitikers");
                });

            modelBuilder.Entity("backend.Models.FakePolitiker", b =>
                {
                    b.Navigation("GameTrackings");

                    b.Navigation("Quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
