using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using backend.DTO.Calendar;
using backend.Models.Calendar;
using backend.Repositories.Calendar;
using Microsoft.Extensions.Logging;

namespace backend.Services.Calendar
{
    public class CalendarService : ICalendarService
    {
        private readonly ICalendarEventRepository _calendarEventRepository;
        private readonly ILogger<CalendarService> _logger;

        public CalendarService(
            ICalendarEventRepository calendarEventRepository,
            ILogger<CalendarService> logger
        )
        {
            _calendarEventRepository = calendarEventRepository;
            _logger = logger;
        }

        public async Task<IEnumerable<CalendarEventDTO>> GetAllEventsAsDTOAsync()
        {
            _logger.LogInformation("Fetching all calendar events via Calendar Repository.");
            var calendarEvents = await _calendarEventRepository.GetAllEventsAsync();

            if (calendarEvents == null || !calendarEvents.Any())
            {
                _logger.LogWarning("No calendar events found by the repository.");
                return Enumerable.Empty<CalendarEventDTO>();
            }

            var eventDTOs = calendarEvents
                .Select(e => new CalendarEventDTO
                {
                    Id = e.Id,
                    Title = e.Title,
                    StartDateTimeUtc = e.StartDateTimeUtc,
                    Location = e.Location,
                    SourceUrl = e.SourceUrl,
                })
                .ToList();

            _logger.LogInformation(
                "Successfully fetched and mapped {EventCount} events to DTOs in service.",
                eventDTOs.Count
            );
            return eventDTOs;
        }

        public async Task<CalendarEventDTO> CreateEventAsync(CalendarEventDTO calendarEventDto)
        {
            _logger.LogInformation("Creating a new calendar event via Calendar Repository.");
            var calendarEvent = new CalendarEvent
            {
                Title = calendarEventDto.Title,
                StartDateTimeUtc = calendarEventDto.StartDateTimeUtc,
                Location = calendarEventDto.Location,
                SourceUrl = calendarEventDto.SourceUrl ?? string.Empty, // Ensure SourceUrl is not null
            };

            await _calendarEventRepository.AddEventAsync(calendarEvent); // AddEventAsync now returns Task
            await _calendarEventRepository.SaveChangesAsync();

            // It's good practice to return the DTO of the created entity,
            // including any ID generated by the database.
            return new CalendarEventDTO
            {
                Id = calendarEvent.Id, // The ID will be populated after SaveChangesAsync
                Title = calendarEvent.Title,
                StartDateTimeUtc = calendarEvent.StartDateTimeUtc,
                Location = calendarEvent.Location,
                SourceUrl = calendarEvent.SourceUrl,
            };
        }

        public async Task<bool> UpdateEventAsync(int id, CalendarEventDTO calendarEventDto)
        {
            _logger.LogInformation(
                $"Updating calendar event with ID: {id} via Calendar Repository."
            );
            var calendarEvent = await _calendarEventRepository.GetEventByIdAsync(id);

            if (calendarEvent == null)
            {
                _logger.LogWarning($"Calendar event with ID: {id} not found.");
                return false;
            }

            calendarEvent.Title = calendarEventDto.Title;
            calendarEvent.StartDateTimeUtc = calendarEventDto.StartDateTimeUtc;
            calendarEvent.Location = calendarEventDto.Location;
            calendarEvent.SourceUrl = calendarEventDto.SourceUrl ?? string.Empty; // Ensure SourceUrl is not null

            _calendarEventRepository.UpdateEvent(calendarEvent);
            int changes = await _calendarEventRepository.SaveChangesAsync();
            return changes > 0;
        }

        public async Task<bool> DeleteEventAsync(int id)
        {
            _logger.LogInformation(
                $"Deleting calendar event with ID: {id} via Calendar Repository."
            );
            var calendarEvent = await _calendarEventRepository.GetEventByIdAsync(id);

            if (calendarEvent == null)
            {
                _logger.LogWarning($"Calendar event with ID: {id} not found for deletion.");
                return false;
            }

            _calendarEventRepository.DeleteEvent(calendarEvent);
            int changes = await _calendarEventRepository.SaveChangesAsync();
            return changes > 0;
        }
    }
}
